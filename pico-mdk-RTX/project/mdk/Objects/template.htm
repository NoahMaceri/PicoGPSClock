<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Tue Mar 22 16:14:08 2022
<BR><P>
<H3>Maximum Stack Usage =        528 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
setup_GNSS &rArr; LCD_1IN3_Init &rArr; DEV_Delay_ms &rArr; sleep_ms &rArr; sleep_us &rArr; sleep_until &rArr; alarm_pool_add_alarm_at &rArr; add_alarm_under_lock &rArr; ph_remove_and_free_node &rArr; ph_remove_any_head &rArr; ph_merge_two_pass &rArr;  ph_merge_two_pass (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[59]">_stage2_boot</a>
 <LI><a href="#[5a]">read_flash_sreg</a>
 <LI><a href="#[4]">SVC_Handler</a>
 <LI><a href="#[5]">PendSV_Handler</a>
 <LI><a href="#[24]">$Super$$SysTick_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1d]">ADC_IRQ_FIFO_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1d]">ADC_IRQ_FIFO_Handler</a><BR>
 <LI><a href="#[3]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">HardFault_Handler</a><BR>
 <LI><a href="#[87]">mutex_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[104]">__aeabi_assert</a><BR>
 <LI><a href="#[106]">abort</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[106]">abort</a><BR>
 <LI><a href="#[14d]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14d]">osRtxErrorNotify</a><BR>
 <LI><a href="#[3d]">osRtxIdleThread</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3d]">osRtxIdleThread</a><BR>
 <LI><a href="#[173]">ph_merge_two_pass</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[173]">ph_merge_two_pass</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[24]">$Super$$SysTick_Handler</a> from irq_armv6m.o(.text) referenced from systick_wrapper_ual.o(.text)
 <LI><a href="#[1d]">ADC_IRQ_FIFO_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[18]">CLOCKS_IRQ_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[12]">DMA_IRQ_0_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[13]">DMA_IRQ_1_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[21]">Default_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from irq.o(.text.irq_add_tail_to_free_list)
 <LI><a href="#[21]">Default_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from irq.o(.text.irq_remove_handler)
 <LI><a href="#[21]">Default_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from irq.o(.text.irq_set_exclusive_handler)
 <LI><a href="#[21]">Default_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced 6 times from startup_rp2040.o(RESET)
 <LI><a href="#[3]">HardFault_Handler</a> from startup_rp2040.o(.text.HardFault_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[1e]">I2C0_IRQ_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[1f]">I2C1_IRQ_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[14]">IO_IRQ_BANK0_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[15]">IO_IRQ_QSPI_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[2]">NMI_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[e]">PIO0_IRQ_0_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[f]">PIO0_IRQ_1_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[10]">PIO1_IRQ_0_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[11]">PIO1_IRQ_1_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[b]">PWM_IRQ_WRAP_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[5]">PendSV_Handler</a> from irq_armv6m.o(.text) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[20]">RTC_IRQ_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[1]">Reset_Handler</a> from startup_rp2040.o(.text.Reset_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[16]">SIO_IRQ_PROC0_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[17]">SIO_IRQ_PROC1_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[19]">SPI0_IRQ_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[1a]">SPI1_IRQ_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[4]">SVC_Handler</a> from irq_armv6m.o(.text) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[6]">SysTick_Handler</a> from systick_wrapper_ual.o(.text) referenced from rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[6]">SysTick_Handler</a> from systick_wrapper_ual.o(.text) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[56]">SystemInit</a> from system_rp2040.o(.text.SystemInit) referenced from system_rp2040.o(.init_array)
 <LI><a href="#[7]">TIMER_IRQ_0_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[8]">TIMER_IRQ_1_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[9]">TIMER_IRQ_2_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[a]">TIMER_IRQ_3_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[1b]">UART0_IRQ_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[1c]">UART1_IRQ_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[c]">USBCTRL_IRQ_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[d]">XIP_IRQ_Handler</a> from startup_rp2040.o(.text.Default_Handler) referenced from startup_rp2040.o(RESET)
 <LI><a href="#[55]">__perf_counter_init</a> from perf_counter.o(.text.__perf_counter_init) referenced from perf_counter.o(.init_array.255)
 <LI><a href="#[54]">__pico_entry</a> from startup_rp2040.o(.text.__pico_entry) referenced from startup_rp2040.o(.init_array.101)
 <LI><a href="#[26]">_sbackspace</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[25]">_sgetc</a> from _sgetc.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[51]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[29]">alarm_pool_alarm_callback</a> from time.o(.text.alarm_pool_alarm_callback) referenced from time.o(.text.alarm_pool_post_alloc_init)
 <LI><a href="#[46]">clock_screen</a> from main.o(.text.clock_screen) referenced from main.o(.text.setup_GNSS)
 <LI><a href="#[50]">fputc</a> from env_wrapper.o(.text.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[50]">fputc</a> from env_wrapper.o(.text.fputc) referenced from printfa.o(i.__0vprintf)
 <LI><a href="#[45]">gpio_callback</a> from main.o(.text.gpio_callback) referenced from main.o(.text.setup_GNSS)
 <LI><a href="#[2a]">gpio_irq_handler</a> from gpio.o(.text.gpio_irq_handler) referenced from gpio.o(.text.gpio_set_irq_enabled_with_callback)
 <LI><a href="#[2b]">hardware_alarm_irq_handler</a> from timer.o(.text.hardware_alarm_irq_handler) referenced from timer.o(.text.hardware_alarm_set_callback)
 <LI><a href="#[0]">irq_add_tail_to_free_list</a> from irq.o(.text.irq_add_tail_to_free_list) referenced 2 times from irq_handler_chain.o(.data)
 <LI><a href="#[27]">isspace</a> from isspace_o.o(.text) referenced from strtod.o(.text)
 <LI><a href="#[47]">location_screen</a> from main.o(.text.location_screen) referenced from main.o(.text.setup_GNSS)
 <LI><a href="#[22]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4c]">osRtxEventFlagsPostProcess</a> from rtx_evflags.o(.text.osRtxEventFlagsPostProcess) referenced from rtx_evflags.o(.text.svcRtxEventFlagsNew)
 <LI><a href="#[3d]">osRtxIdleThread</a> from rtx_config.o(.text.osRtxIdleThread) referenced from rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[4d]">osRtxMessageQueuePostProcess</a> from rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced from rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[4f]">osRtxThreadPostProcess</a> from rtx_thread.o(.text.osRtxThreadPostProcess) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[53]">osRtxTimerSetup</a> from rtx_timer.o(.text.osRtxTimerSetup) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[52]">osRtxTimerThread</a> from rtx_timer.o(.text.osRtxTimerThread) referenced from rtx_lib.o(.rodata)
 <LI><a href="#[3e]">osRtxTimerTick</a> from rtx_timer.o(.text.osRtxTimerTick) referenced from rtx_timer.o(.text.osRtxTimerSetup)
 <LI><a href="#[4e]">osThreadExit</a> from rtx_thread.o(.text.osThreadExit) referenced from rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[2c]">setup_GNSS</a> from main.o(.text.setup_GNSS) referenced from main.o(.text.main)
 <LI><a href="#[49]">sleep_until_callback</a> from time.o(.text.sleep_until_callback) referenced from time.o(.text.sleep_until)
 <LI><a href="#[4b]">stdio_out_chars_crlf</a> from stdio.o(.text.stdio_out_chars_crlf) referenced from stdio.o(.text.stdio_put_string)
 <LI><a href="#[4a]">stdio_out_chars_no_crlf</a> from stdio.o(.text.stdio_out_chars_no_crlf) referenced from stdio.o(.text.stdio_put_string)
 <LI><a href="#[2d]">svcRtxDelay</a> from rtx_delay.o(.text.svcRtxDelay) referenced from rtx_delay.o(.text.osDelay)
 <LI><a href="#[2e]">svcRtxEventFlagsClear</a> from rtx_evflags.o(.text.svcRtxEventFlagsClear) referenced from rtx_evflags.o(.text.osEventFlagsClear)
 <LI><a href="#[2f]">svcRtxEventFlagsGet</a> from rtx_evflags.o(.text.svcRtxEventFlagsGet) referenced from rtx_evflags.o(.text.osEventFlagsGet)
 <LI><a href="#[30]">svcRtxEventFlagsNew</a> from rtx_evflags.o(.text.svcRtxEventFlagsNew) referenced from rtx_evflags.o(.text.osEventFlagsNew)
 <LI><a href="#[31]">svcRtxEventFlagsSet</a> from rtx_evflags.o(.text.svcRtxEventFlagsSet) referenced from rtx_evflags.o(.text.osEventFlagsSet)
 <LI><a href="#[32]">svcRtxKernelGetInfo</a> from rtx_kernel.o(.text.svcRtxKernelGetInfo) referenced from rtx_kernel.o(.text.osKernelGetInfo)
 <LI><a href="#[33]">svcRtxKernelGetState</a> from rtx_kernel.o(.text.svcRtxKernelGetState) referenced from rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[34]">svcRtxKernelGetTickFreq</a> from rtx_kernel.o(.text.svcRtxKernelGetTickFreq) referenced from rtx_kernel.o(.text.osKernelGetTickFreq)
 <LI><a href="#[35]">svcRtxKernelInitialize</a> from rtx_kernel.o(.text.svcRtxKernelInitialize) referenced from rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[36]">svcRtxKernelStart</a> from rtx_kernel.o(.text.svcRtxKernelStart) referenced from rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[37]">svcRtxMessageQueueGet</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced from rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[38]">svcRtxMessageQueueNew</a> from rtx_msgqueue.o(.text.svcRtxMessageQueueNew) referenced from rtx_msgqueue.o(.text.osMessageQueueNew)
 <LI><a href="#[39]">svcRtxMessageQueuePut</a> from rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced from rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[3a]">svcRtxMutexAcquire</a> from rtx_mutex.o(.text.svcRtxMutexAcquire) referenced from rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[3b]">svcRtxMutexNew</a> from rtx_mutex.o(.text.svcRtxMutexNew) referenced from rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[3c]">svcRtxMutexRelease</a> from rtx_mutex.o(.text.svcRtxMutexRelease) referenced from rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[3f]">svcRtxThreadExit</a> from rtx_thread.o(.text.svcRtxThreadExit) referenced from rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[40]">svcRtxThreadGetName</a> from rtx_thread.o(.text.svcRtxThreadGetName) referenced from rtx_thread.o(.text.osThreadGetName)
 <LI><a href="#[41]">svcRtxThreadNew</a> from rtx_thread.o(.text.svcRtxThreadNew) referenced from rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[42]">svcRtxThreadResume</a> from rtx_thread.o(.text.svcRtxThreadResume) referenced from rtx_thread.o(.text.osThreadResume)
 <LI><a href="#[43]">svcRtxThreadSuspend</a> from rtx_thread.o(.text.svcRtxThreadSuspend) referenced from rtx_thread.o(.text.osThreadSuspend)
 <LI><a href="#[44]">svcRtxThreadTerminate</a> from rtx_thread.o(.text.svcRtxThreadTerminate) referenced from rtx_thread.o(.text.osThreadTerminate)
 <LI><a href="#[48]">techdata_screen</a> from main.o(.text.techdata_screen) referenced from main.o(.text.setup_GNSS)
 <LI><a href="#[28]">timer_pool_entry_comparator</a> from time.o(.text.timer_pool_entry_comparator) referenced from time.o(.text.alarm_pool_init_default)
 <LI><a href="#[23]">user_code_insert_to_systick_handler</a> from perf_counter.o(.text.user_code_insert_to_systick_handler) referenced from systick_wrapper_ual.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[59]"></a>_stage2_boot</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, compile_time_choice.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_flash_sreg
</UL>

<P><STRONG><a name="[5a]"></a>read_flash_sreg</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, compile_time_choice.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_stage2_boot
</UL>

<P><STRONG><a name="[58]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[194]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry4.o(.ARM.Collect$$$$00000003))

<P><STRONG><a name="[5c]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7d]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[195]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[5e]"></a>_main_cpp_init$empty</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8a.o(.ARM.Collect$$$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _main_cpp_init$empty &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[196]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[197]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[198]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[199]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[4]"></a>SVC_Handler</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, irq_armv6m.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>PendSV_Handler</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, irq_armv6m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>$Super$$SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, irq_armv6m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = $Super$$SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systick_wrapper_ual.o(.text)
</UL>
<P><STRONG><a name="[6]"></a>SysTick_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, systick_wrapper_ual.o(.text))
<BR>[Address Reference Count : 2]<UL><LI> startup_rp2040.o(RESET)
<LI> rtx_kernel.o(.text.svcRtxKernelStart)
</UL>
<P><STRONG><a name="[13b]"></a>__ensure_systick_wrapper</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, systick_wrapper_ual.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[61]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_uldivmod &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_configure
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, llmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_baudrate
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_ms
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[19a]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, llmul.o(.text), UNUSED)

<P><STRONG><a name="[9c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetInfo
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
</UL>

<P><STRONG><a name="[176]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtime_init
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[188]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[64]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[9e]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[9f]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[66]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[120]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdio_put_string
</UL>

<P><STRONG><a name="[f5]"></a>strtok</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, strtok.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strtok
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L76X_Update
</UL>

<P><STRONG><a name="[67]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L76X_Update
</UL>

<P><STRONG><a name="[5b]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cpp_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_cpp_init$empty
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[13d]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L76X_Update
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[f8]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_baudrate
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_baudrate
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_baudrate
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_configure
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L76X_Update
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_uidivmod</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, uidiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L76X_Update
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod$div0
</UL>

<P><STRONG><a name="[189]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv_div0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;user_code_insert_to_systick_handler
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_idivmod$div0</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, idiv_div0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[63]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[19d]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[19e]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[19f]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>__strtod_int</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[69]"></a>strtol</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1a0]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1a1]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[6c]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[18f]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[5d]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1a2]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[27]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace_o.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = isspace
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[75]"></a>_scanf_real</STRONG> (Thumb, 0 bytes, Stack size 104 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_local_sscanf
</UL>

<P><STRONG><a name="[81]"></a>_scanf_really_real</STRONG> (Thumb, 584 bytes, Stack size 104 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[25]"></a>_sgetc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[26]"></a>_sbackspace</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> strtod.o(.text)
</UL>
<P><STRONG><a name="[78]"></a>_strtoul</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[83]"></a>_chval</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_ul2d</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, dfltul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1a3]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[1a4]"></a>__decompress0</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, __dczerorl.o(.text), UNUSED)

<P><STRONG><a name="[84]"></a>vprintf</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stdio.o(.text.$Sub$$vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = vprintf &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_serialize_begin
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_exit
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
</UL>

<P><STRONG><a name="[88]"></a>DEV_Delay_ms</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dev_config.o(.text.DEV_Delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = DEV_Delay_ms &rArr; sleep_ms &rArr; sleep_us &rArr; sleep_until &rArr; alarm_pool_add_alarm_at &rArr; add_alarm_under_lock &rArr; ph_remove_and_free_node &rArr; ph_remove_any_head &rArr; ph_merge_two_pass &rArr;  ph_merge_two_pass (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_Init
</UL>

<P><STRONG><a name="[f0]"></a>DEV_Digital_Write</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dev_config.o(.text.DEV_Digital_Write))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_SendData_8Bit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_SendCommand
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_Clear
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
</UL>

<P><STRONG><a name="[8a]"></a>DEV_GPIO_Init</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, dev_config.o(.text.DEV_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DEV_GPIO_Init &rArr; gpio_init
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Module_Init
</UL>

<P><STRONG><a name="[8c]"></a>DEV_Module_Init</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, dev_config.o(.text.DEV_Module_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DEV_Module_Init &rArr; i2c_init &rArr; i2c_set_baudrate &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_pulls
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_function
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
</UL>

<P><STRONG><a name="[91]"></a>DEV_SET_PWM</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dev_config.o(.text.DEV_SET_PWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = DEV_SET_PWM &rArr; puts &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_Init
</UL>

<P><STRONG><a name="[93]"></a>DEV_SPI_WriteByte</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, dev_config.o(.text.DEV_SPI_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DEV_SPI_WriteByte &rArr; spi_write_blocking
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_blocking
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_SendData_8Bit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_SendCommand
</UL>

<P><STRONG><a name="[95]"></a>DEV_SPI_Write_nByte</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dev_config.o(.text.DEV_SPI_Write_nByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DEV_SPI_Write_nByte &rArr; spi_write_blocking
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_write_blocking
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_Clear
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
</UL>

<P><STRONG><a name="[1d]"></a>ADC_IRQ_FIFO_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQ_FIFO_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQ_FIFO_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>CLOCKS_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>DMA_IRQ_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DMA_IRQ_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 4]<UL><LI> startup_rp2040.o(RESET)
<LI> irq.o(.text.irq_set_exclusive_handler)
<LI> irq.o(.text.irq_remove_handler)
<LI> irq.o(.text.irq_add_tail_to_free_list)
</UL>
<P><STRONG><a name="[1e]"></a>I2C0_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>I2C1_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>IO_IRQ_BANK0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>IO_IRQ_QSPI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PIO0_IRQ_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PIO0_IRQ_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PIO1_IRQ_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>PIO1_IRQ_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PWM_IRQ_WRAP_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RTC_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>SIO_IRQ_PROC0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>SIO_IRQ_PROC1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI0_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI1_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>TIMER_IRQ_0_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>TIMER_IRQ_1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>TIMER_IRQ_2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>TIMER_IRQ_3_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART0_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>UART1_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>USBCTRL_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>XIP_IRQ_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Default_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[98]"></a>EventRecord2</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, eventrecorder.o(.text.EventRecord2))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsSetDone
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsSet
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsNew
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsGet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsCreated
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsClearDone
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsClear
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSuspended
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSuspend
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadResumed
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadResume
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetName
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInfoRetrieved
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickFreq
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelErrorNotify
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
</UL>

<P><STRONG><a name="[9a]"></a>EventRecord4</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, eventrecorder.o(.text.EventRecord4))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitCompleted
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNew
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetInfo
</UL>

<P><STRONG><a name="[9b]"></a>EventRecordData</STRONG> (Thumb, 376 bytes, Stack size 48 bytes, eventrecorder.o(.text.EventRecordData))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInfoRetrieved
</UL>

<P><STRONG><a name="[153]"></a>EventRecorderDisable</STRONG> (Thumb, 80 bytes, Stack size 28 bytes, eventrecorder.o(.text.EventRecorderDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EventRecorderDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>

<P><STRONG><a name="[a1]"></a>EventRecorderEnable</STRONG> (Thumb, 80 bytes, Stack size 28 bytes, eventrecorder.o(.text.EventRecorderEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = EventRecorderEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[9d]"></a>EventRecorderInitialize</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, eventrecorder.o(.text.EventRecorderInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerSetup
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>

<P><STRONG><a name="[a2]"></a>EventRecorderStart</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, eventrecorder.o(.text.EventRecorderStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordItem
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[97]"></a>EventRecorderTimerGetCount</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, env_wrapper.o(.text.EventRecorderTimerGetCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EventRecorderTimerGetCount &rArr; get_system_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventGetTS
</UL>

<P><STRONG><a name="[a0]"></a>EventRecorderTimerSetup</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, env_wrapper.o(.text.EventRecorderTimerSetup))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
</UL>

<P><STRONG><a name="[a4]"></a>EvrRtxDelay</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxDelay &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[a5]"></a>EvrRtxDelayCompleted</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxDelayCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxDelayCompleted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[a6]"></a>EvrRtxDelayError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxDelayError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxDelayError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>

<P><STRONG><a name="[a7]"></a>EvrRtxDelayStarted</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxDelayStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxDelayStarted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
</UL>

<P><STRONG><a name="[a8]"></a>EvrRtxEventFlagsClear</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxEventFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxEventFlagsClear &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
</UL>

<P><STRONG><a name="[a9]"></a>EvrRtxEventFlagsClearDone</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxEventFlagsClearDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxEventFlagsClearDone &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsClear
</UL>

<P><STRONG><a name="[aa]"></a>EvrRtxEventFlagsCreated</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxEventFlagsCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxEventFlagsCreated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
</UL>

<P><STRONG><a name="[ab]"></a>EvrRtxEventFlagsError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxEventFlagsError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxEventFlagsError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsClear
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[ac]"></a>EvrRtxEventFlagsGet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxEventFlagsGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxEventFlagsGet &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsGet
</UL>

<P><STRONG><a name="[ad]"></a>EvrRtxEventFlagsNew</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxEventFlagsNew &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>

<P><STRONG><a name="[ae]"></a>EvrRtxEventFlagsSet</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxEventFlagsSet &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>

<P><STRONG><a name="[af]"></a>EvrRtxEventFlagsSetDone</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxEventFlagsSetDone))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxEventFlagsSetDone &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>

<P><STRONG><a name="[b0]"></a>EvrRtxEventFlagsWaitCompleted</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxEventFlagsWaitCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxEventFlagsWaitCompleted &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
</UL>

<P><STRONG><a name="[b1]"></a>EvrRtxEventFlagsWaitTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxEventFlagsWaitTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxEventFlagsWaitTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[b2]"></a>EvrRtxKernelError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[b3]"></a>EvrRtxKernelErrorNotify</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[b4]"></a>EvrRtxKernelGetInfo</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxKernelGetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxKernelGetInfo &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetInfo
</UL>

<P><STRONG><a name="[b5]"></a>EvrRtxKernelGetTickFreq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetTickFreq
</UL>

<P><STRONG><a name="[b6]"></a>EvrRtxKernelInfoRetrieved</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxKernelInfoRetrieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = EvrRtxKernelInfoRetrieved &rArr; EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetInfo
</UL>

<P><STRONG><a name="[b7]"></a>EvrRtxKernelInitialize</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelInitialize &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[b8]"></a>EvrRtxKernelInitialized</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelInitialized))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelInitialized &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[b9]"></a>EvrRtxKernelStart</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelStart &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>

<P><STRONG><a name="[ba]"></a>EvrRtxKernelStarted</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxKernelStarted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxKernelStarted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[bb]"></a>EvrRtxMemoryAlloc</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[bc]"></a>EvrRtxMemoryBlockAlloc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
</UL>

<P><STRONG><a name="[bd]"></a>EvrRtxMemoryBlockFree</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
</UL>

<P><STRONG><a name="[be]"></a>EvrRtxMemoryBlockInit</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryBlockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
</UL>

<P><STRONG><a name="[bf]"></a>EvrRtxMemoryFree</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>

<P><STRONG><a name="[c0]"></a>EvrRtxMemoryInit</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMemoryInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>

<P><STRONG><a name="[c1]"></a>EvrRtxMemoryPoolAllocTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMemoryPoolAllocTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMemoryPoolAllocTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[c2]"></a>EvrRtxMessageQueueCreated</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueCreated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[c3]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[c4]"></a>EvrRtxMessageQueueGet</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueGet &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[c5]"></a>EvrRtxMessageQueueGetPending</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGetPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueGetPending &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[c6]"></a>EvrRtxMessageQueueGetTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueGetTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueGetTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[c7]"></a>EvrRtxMessageQueueInsertPending</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueInsertPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueInsertPending &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[c8]"></a>EvrRtxMessageQueueInserted</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueInserted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[c9]"></a>EvrRtxMessageQueueNew</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueueNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
</UL>

<P><STRONG><a name="[ca]"></a>EvrRtxMessageQueueNotInserted</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNotInserted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueNotInserted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[cb]"></a>EvrRtxMessageQueueNotRetrieved</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueNotRetrieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueNotRetrieved &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[cc]"></a>EvrRtxMessageQueuePut</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueuePut &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[cd]"></a>EvrRtxMessageQueuePutPending</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePutPending))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxMessageQueuePutPending &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
</UL>

<P><STRONG><a name="[ce]"></a>EvrRtxMessageQueuePutTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueuePutTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueuePutTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[cf]"></a>EvrRtxMessageQueueRetrieved</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMessageQueueRetrieved))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMessageQueueRetrieved &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[d0]"></a>EvrRtxMutexAcquire</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexAcquire &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>

<P><STRONG><a name="[d1]"></a>EvrRtxMutexAcquirePending</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexAcquirePending))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexAcquirePending &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[d2]"></a>EvrRtxMutexAcquireTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexAcquireTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexAcquireTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[d3]"></a>EvrRtxMutexAcquired</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexAcquired &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[d4]"></a>EvrRtxMutexCreated</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexCreated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
</UL>

<P><STRONG><a name="[d5]"></a>EvrRtxMutexError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[d6]"></a>EvrRtxMutexNew</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexNew &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>

<P><STRONG><a name="[d7]"></a>EvrRtxMutexNotAcquired</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexNotAcquired))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexNotAcquired &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[d8]"></a>EvrRtxMutexRelease</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexRelease &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>

<P><STRONG><a name="[d9]"></a>EvrRtxMutexReleased</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxMutexReleased))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxMutexReleased &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
</UL>

<P><STRONG><a name="[da]"></a>EvrRtxSemaphoreAcquireTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxSemaphoreAcquireTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxSemaphoreAcquireTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[db]"></a>EvrRtxThreadBlocked</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadBlocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadBlocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[dc]"></a>EvrRtxThreadCreated</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadCreated))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadCreated &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[dd]"></a>EvrRtxThreadDestroyed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadDestroyed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadDestroyed &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[de]"></a>EvrRtxThreadError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadError))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadResume
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[df]"></a>EvrRtxThreadExit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadExit &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[e0]"></a>EvrRtxThreadFlagsWaitCompleted</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitCompleted))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadFlagsWaitCompleted &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[e1]"></a>EvrRtxThreadFlagsWaitTimeout</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadFlagsWaitTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadFlagsWaitTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[e2]"></a>EvrRtxThreadGetName</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadGetName))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadGetName &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetName
</UL>

<P><STRONG><a name="[e3]"></a>EvrRtxThreadJoined</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadJoined))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadJoined &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
</UL>

<P><STRONG><a name="[e4]"></a>EvrRtxThreadNew</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, rtx_evr.o(.text.EvrRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
</UL>

<P><STRONG><a name="[e5]"></a>EvrRtxThreadPreempted</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadPreempted))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>

<P><STRONG><a name="[e6]"></a>EvrRtxThreadResume</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadResume &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
</UL>

<P><STRONG><a name="[e7]"></a>EvrRtxThreadResumed</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadResumed))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadResumed &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadResume
</UL>

<P><STRONG><a name="[e8]"></a>EvrRtxThreadSuspend</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadSuspend &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
</UL>

<P><STRONG><a name="[e9]"></a>EvrRtxThreadSuspended</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadSuspended &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
</UL>

<P><STRONG><a name="[57]"></a>EvrRtxThreadSwitched</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, perf_os_patch_rtx5.o(.text.EvrRtxThreadSwitched))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_context_switch
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
</UL>

<P><STRONG><a name="[eb]"></a>EvrRtxThreadTerminate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadTerminate &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[ec]"></a>EvrRtxThreadUnblocked</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxThreadUnblocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxThreadUnblocked &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[ed]"></a>EvrRtxTimerCallback</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_evr.o(.text.EvrRtxTimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = EvrRtxTimerCallback &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[ee]"></a>GLCD_DrawBitmap</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, lcd_1in3.o(.text.GLCD_DrawBitmap))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GLCD_DrawBitmap &rArr; LCD_1IN3_SetWindows &rArr; LCD_1IN3_SendData_8Bit &rArr; DEV_SPI_WriteByte &rArr; spi_write_blocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_SetWindows
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SPI_Write_nByte
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Digital_Write
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
</UL>

<P><STRONG><a name="[3]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_rp2040.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[f2]"></a>L76X_Update</STRONG> (Thumb, 624 bytes, Stack size 72 bytes, main.o(.text.L76X_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = L76X_Update &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtok
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
</UL>

<P><STRONG><a name="[fb]"></a>LCD_1IN3_Clear</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lcd_1in3.o(.text.LCD_1IN3_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = LCD_1IN3_Clear &rArr; LCD_1IN3_SetWindows &rArr; LCD_1IN3_SendData_8Bit &rArr; DEV_SPI_WriteByte &rArr; spi_write_blocking
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_SetWindows
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SPI_Write_nByte
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Digital_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
</UL>

<P><STRONG><a name="[fc]"></a>LCD_1IN3_Init</STRONG> (Thumb, 492 bytes, Stack size 48 bytes, lcd_1in3.o(.text.LCD_1IN3_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = LCD_1IN3_Init &rArr; DEV_Delay_ms &rArr; sleep_ms &rArr; sleep_us &rArr; sleep_until &rArr; alarm_pool_add_alarm_at &rArr; add_alarm_under_lock &rArr; ph_remove_and_free_node &rArr; ph_remove_any_head &rArr; ph_merge_two_pass &rArr;  ph_merge_two_pass (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Digital_Write
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_SendData_8Bit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_SendCommand
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SET_PWM
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
</UL>

<P><STRONG><a name="[ef]"></a>LCD_1IN3_SetWindows</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lcd_1in3.o(.text.LCD_1IN3_SetWindows))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LCD_1IN3_SetWindows &rArr; LCD_1IN3_SendData_8Bit &rArr; DEV_SPI_WriteByte &rArr; spi_write_blocking
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_SendData_8Bit
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_Clear
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
</UL>

<P><STRONG><a name="[16c]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[186]"></a>OS_Tick_Enable</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[185]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, os_systick.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[fe]"></a>OS_Tick_Setup</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, os_systick.o(.text.OS_Tick_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OS_Tick_Setup &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[11e]"></a>Paint_Clear</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, gui_paint.o(.text.Paint_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Paint_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
</UL>

<P><STRONG><a name="[ff]"></a>Paint_DrawChar</STRONG> (Thumb, 192 bytes, Stack size 48 bytes, gui_paint.o(.text.Paint_DrawChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Paint_DrawChar &rArr; Paint_SetPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint_SetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint_DrawString_EN
</UL>

<P><STRONG><a name="[101]"></a>Paint_DrawString_EN</STRONG> (Thumb, 172 bytes, Stack size 64 bytes, gui_paint.o(.text.Paint_DrawString_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Paint_DrawString_EN &rArr; Paint_DrawChar &rArr; Paint_SetPixel
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint_DrawChar
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
</UL>

<P><STRONG><a name="[17b]"></a>Paint_NewImage</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, gui_paint.o(.text.Paint_NewImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Paint_NewImage
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
</UL>

<P><STRONG><a name="[100]"></a>Paint_SetPixel</STRONG> (Thumb, 292 bytes, Stack size 16 bytes, gui_paint.o(.text.Paint_SetPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Paint_SetPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint_DrawChar
</UL>

<P><STRONG><a name="[17c]"></a>Paint_SetScale</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, gui_paint.o(.text.Paint_SetScale))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
</UL>

<P><STRONG><a name="[1]"></a>Reset_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, startup_rp2040.o(.text.Reset_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system_rp2040.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_hz
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[56]"></a>SystemInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, system_rp2040.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_hz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_rp2040.o(.init_array)
</UL>
<P><STRONG><a name="[f3]"></a>UART_RX</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, main.o(.text.UART_RX))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = UART_RX &rArr; malloc
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L76X_Update
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_assert</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, retarget_io.o(.text.__aeabi_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_baudrate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_merge_two_pass
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_clear
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_remove_any_head
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_add_child_node
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_pool_entry_comparator
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_us
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_until
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_remove_and_free_node
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_alarm_set_target
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_add_alarm_at
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_add_child_node
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_alarm_callback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_alarm_under_lock
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_remove_handler
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_add_tail_to_free_list
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_init
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_set_exclusive_handler
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_configure
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtime_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_init
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_exit
</UL>

<P><STRONG><a name="[ea]"></a>__on_context_switch</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, perf_os_patch_rtx5.o(.text.__on_context_switch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __on_context_switch &rArr; __on_context_switch_out &rArr; get_system_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_context_switch_out
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_context_switch_in
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
</UL>

<P><STRONG><a name="[108]"></a>__on_context_switch_in</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, perf_counter.o(.text.__on_context_switch_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __on_context_switch_in &rArr; get_system_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_context_switch
</UL>

<P><STRONG><a name="[107]"></a>__on_context_switch_out</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, perf_counter.o(.text.__on_context_switch_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __on_context_switch_out &rArr; get_system_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_system_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_context_switch
</UL>

<P><STRONG><a name="[55]"></a>__perf_counter_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, perf_counter.o(.text.__perf_counter_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __perf_counter_init &rArr; init_cycle_counter &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> perf_counter.o(.init_array.255)
</UL>
<P><STRONG><a name="[13c]"></a>__perf_os_patch_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, perf_counter.o(.text.__perf_os_patch_init))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[54]"></a>__pico_entry</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, startup_rp2040.o(.text.__pico_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = __pico_entry &rArr; runtime_init &rArr; alarm_pool_init_default &rArr; alarm_pool_post_alloc_init &rArr; hardware_alarm_set_callback &rArr; irq_remove_handler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtime_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_rp2040.o(.init_array.101)
</UL>
<P><STRONG><a name="[10b]"></a>_write</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stdio.o(.text._write))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdio_put_string
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>

<P><STRONG><a name="[106]"></a>abort</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, retarget_io.o(.text.abort))
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[111]"></a>alarm_pool_add_alarm_at</STRONG> (Thumb, 272 bytes, Stack size 72 bytes, time.o(.text.alarm_pool_add_alarm_at))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = alarm_pool_add_alarm_at &rArr; add_alarm_under_lock &rArr; ph_remove_and_free_node &rArr; ph_remove_any_head &rArr; ph_merge_two_pass &rArr;  ph_merge_two_pass (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_alarm_under_lock
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_us_64
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_until
</UL>

<P><STRONG><a name="[114]"></a>alarm_pool_init_default</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, time.o(.text.alarm_pool_init_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = alarm_pool_init_default &rArr; alarm_pool_post_alloc_init &rArr; hardware_alarm_set_callback &rArr; irq_remove_handler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_post_alloc_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_post_alloc_init
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtime_init
</UL>

<P><STRONG><a name="[181]"></a>busy_wait_until</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer.o(.text.busy_wait_until))
<BR><BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_until
</UL>

<P><STRONG><a name="[13e]"></a>check_sys_clock_khz</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stdlib.o(.text.check_sys_clock_khz))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11c]"></a>clock_configure</STRONG> (Thumb, 240 bytes, Stack size 56 bytes, clocks.o(.text.clock_configure))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = clock_configure &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clocks_init
</UL>

<P><STRONG><a name="[103]"></a>clock_get_hz</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, clocks.o(.text.clock_get_hz))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_baudrate
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_baudrate
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_baudrate
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[46]"></a>clock_screen</STRONG> (Thumb, 560 bytes, Stack size 48 bytes, main.o(.text.clock_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = clock_screen &rArr; L76X_Update &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsGet
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatusName
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint_DrawString_EN
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint_Clear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L76X_Update
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.setup_GNSS)
</UL>
<P><STRONG><a name="[12a]"></a>clocks_init</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, clocks.o(.text.clocks_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = clocks_init &rArr; clock_configure &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xosc_init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;watchdog_start_tick
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;running_on_fpga
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pll_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_configure
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtime_init
</UL>

<P><STRONG><a name="[12f]"></a>dev_key_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, dev_config.o(.text.dev_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = dev_key_init &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_pulls
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
</UL>

<P><STRONG><a name="[50]"></a>fputc</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, env_wrapper.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputs
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printfa.o(i.__0printf)
<LI> printfa.o(i.__0vprintf)
</UL>
<P><STRONG><a name="[128]"></a>getStatusName</STRONG> (Thumb, 88 bytes, Stack size 0 bytes, main.o(.text.getStatusName))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
</UL>

<P><STRONG><a name="[a3]"></a>get_system_ticks</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, perf_counter.o(.text.get_system_ticks))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_system_ticks
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_context_switch_out
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__on_context_switch_in
</UL>

<P><STRONG><a name="[45]"></a>gpio_callback</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, main.o(.text.gpio_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = gpio_callback &rArr; osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.setup_GNSS)
</UL>
<P><STRONG><a name="[8b]"></a>gpio_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, gpio.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_GPIO_Init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_init
</UL>

<P><STRONG><a name="[8e]"></a>gpio_set_function</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, gpio.o(.text.gpio_set_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = gpio_set_function
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Module_Init
</UL>

<P><STRONG><a name="[17a]"></a>gpio_set_irq_enabled</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, gpio.o(.text.gpio_set_irq_enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_set_irq_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
</UL>

<P><STRONG><a name="[132]"></a>gpio_set_irq_enabled_with_callback</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, gpio.o(.text.gpio_set_irq_enabled_with_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = gpio_set_irq_enabled_with_callback &rArr; irq_set_exclusive_handler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_set_exclusive_handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_set_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
</UL>

<P><STRONG><a name="[90]"></a>gpio_set_pulls</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, gpio.o(.text.gpio_set_pulls))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_set_pulls
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Module_Init
</UL>

<P><STRONG><a name="[119]"></a>hardware_alarm_cancel</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, timer.o(.text.hardware_alarm_cancel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hardware_alarm_cancel
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_post_alloc_init
</UL>

<P><STRONG><a name="[118]"></a>hardware_alarm_claim</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, timer.o(.text.hardware_alarm_claim))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = hardware_alarm_claim &rArr; hw_claim_or_assert &rArr; panic &rArr; puts &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_claim_or_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_post_alloc_init
</UL>

<P><STRONG><a name="[11a]"></a>hardware_alarm_set_callback</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, timer.o(.text.hardware_alarm_set_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = hardware_alarm_set_callback &rArr; irq_remove_handler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_remove_handler
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_get_vtable_handler
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_set_exclusive_handler
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_set_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_post_alloc_init
</UL>

<P><STRONG><a name="[10f]"></a>hardware_alarm_set_target</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, timer.o(.text.hardware_alarm_set_target))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = hardware_alarm_set_target &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_alarm_callback
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_alarm_under_lock
</UL>

<P><STRONG><a name="[135]"></a>hw_claim_or_assert</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, claim.o(.text.hw_claim_or_assert))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = hw_claim_or_assert &rArr; panic &rArr; puts &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_alarm_claim
</UL>

<P><STRONG><a name="[8f]"></a>i2c_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, i2c.o(.text.i2c_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = i2c_init &rArr; i2c_set_baudrate &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_set_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Module_Init
</UL>

<P><STRONG><a name="[139]"></a>i2c_set_baudrate</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, i2c.o(.text.i2c_set_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = i2c_set_baudrate &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_hz
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_init
</UL>

<P><STRONG><a name="[109]"></a>init_cycle_counter</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, perf_counter.o(.text.init_cycle_counter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_cycle_counter &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ensure_systick_wrapper
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stop_cycle_counter
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__perf_os_patch_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__perf_counter_init
</UL>

<P><STRONG><a name="[0]"></a>irq_add_tail_to_free_list</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, irq.o(.text.irq_add_tail_to_free_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = irq_add_tail_to_free_list &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> irq_handler_chain.o(.data)
</UL>
<P><STRONG><a name="[136]"></a>irq_get_vtable_handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, irq.o(.text.irq_get_vtable_handler))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_alarm_set_callback
</UL>

<P><STRONG><a name="[178]"></a>irq_init_priorities</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, irq.o(.text.irq_init_priorities))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtime_init
</UL>

<P><STRONG><a name="[137]"></a>irq_remove_handler</STRONG> (Thumb, 444 bytes, Stack size 48 bytes, irq.o(.text.irq_remove_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = irq_remove_handler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_alarm_set_callback
</UL>

<P><STRONG><a name="[134]"></a>irq_set_enabled</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, irq.o(.text.irq_set_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_alarm_set_callback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_irq_enabled_with_callback
</UL>

<P><STRONG><a name="[133]"></a>irq_set_exclusive_handler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, irq.o(.text.irq_set_exclusive_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = irq_set_exclusive_handler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_alarm_set_callback
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_irq_enabled_with_callback
</UL>

<P><STRONG><a name="[47]"></a>location_screen</STRONG> (Thumb, 312 bytes, Stack size 32 bytes, main.o(.text.location_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = location_screen &rArr; L76X_Update &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsGet
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatusName
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint_DrawString_EN
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint_Clear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L76X_Update
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.setup_GNSS)
</UL>
<P><STRONG><a name="[117]"></a>lock_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lock_core.o(.text.lock_init))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recursive_mutex_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_init_default
</UL>

<P><STRONG><a name="[22]"></a>main</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = main &rArr; panic &rArr; puts &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sys_clock_pll
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sys_clock_khz
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueNew
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsNew
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[146]"></a>mutex_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mutex_pico.o(.text.mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mutex_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_striped_spin_lock_num
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtime_init
</UL>

<P><STRONG><a name="[11b]"></a>next_striped_spin_lock_num</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sync.o(.text.next_striped_spin_lock_num))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recursive_mutex_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_post_alloc_init
</UL>

<P><STRONG><a name="[123]"></a>osDelay</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_delay.o(.text.osDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osDelay &rArr; EvrRtxDelayError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_callback
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
</UL>

<P><STRONG><a name="[125]"></a>osEventFlagsClear</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_evflags.o(.text.osEventFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osEventFlagsClear &rArr; svcRtxEventFlagsClear &rArr; EvrRtxEventFlagsError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsClear
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsClear
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
</UL>

<P><STRONG><a name="[124]"></a>osEventFlagsGet</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_evflags.o(.text.osEventFlagsGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osEventFlagsGet &rArr; svcRtxEventFlagsGet &rArr; EvrRtxEventFlagsGet &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsGet
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
</UL>

<P><STRONG><a name="[142]"></a>osEventFlagsNew</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_evflags.o(.text.osEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osEventFlagsNew &rArr; EvrRtxEventFlagsNew &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsNew
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[131]"></a>osEventFlagsSet</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, rtx_evflags.o(.text.osEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osEventFlagsSet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsSetDone
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsSet
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_callback
</UL>

<P><STRONG><a name="[148]"></a>osKernelGetInfo</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, rtx_kernel.o(.text.osKernelGetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osKernelGetInfo &rArr; svcRtxKernelGetInfo &rArr; EvrRtxKernelInfoRetrieved &rArr; EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetInfo
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
</UL>

<P><STRONG><a name="[152]"></a>osKernelGetState</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
</UL>

<P><STRONG><a name="[149]"></a>osKernelGetTickFreq</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_kernel.o(.text.osKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
</UL>

<P><STRONG><a name="[140]"></a>osKernelInitialize</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osKernelInitialize &rArr; osRtxKernelPreInit &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialize
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[145]"></a>osKernelStart</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osKernelStart &rArr; EvrRtxKernelStart &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStart
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11d]"></a>osMessageQueueGet</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[144]"></a>osMessageQueueNew</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osMessageQueueNew &rArr; EvrRtxMessageQueueNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNew
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fa]"></a>osMessageQueuePut</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePut
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInsertPending
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L76X_Update
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[121]"></a>osMutexAcquire</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osMutexAcquire &rArr; EvrRtxMutexError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
</UL>

<P><STRONG><a name="[141]"></a>osMutexNew</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osMutexNew &rArr; EvrRtxMutexNew &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNew
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[122]"></a>osMutexRelease</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osMutexRelease &rArr; EvrRtxMutexRelease &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexRelease
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
</UL>

<P><STRONG><a name="[14d]"></a>osRtxErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text.osRtxErrorNotify))
<BR><BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
</UL>

<P><STRONG><a name="[3d]"></a>osRtxIdleThread</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rtx_config.o(.text.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[151]"></a>osRtxKernelErrorNotify</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, rtx_kernel.o(.text.osRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[14a]"></a>osRtxKernelPreInit</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, rtx_lib.o(.text.osRtxKernelPreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxKernelPreInit &rArr; EventRecorderInitialize &rArr; EventRecorderStart &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderEnable
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderDisable
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[154]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[155]"></a>osRtxMemoryFree</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[156]"></a>osRtxMemoryInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osRtxMemoryInit &rArr; EvrRtxMemoryInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryInit
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[14c]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxMemoryPoolAlloc &rArr; EvrRtxMemoryBlockAlloc &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockAlloc
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsNew
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[157]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osRtxMemoryPoolFree &rArr; EvrRtxMemoryBlockFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockFree
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[158]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryBlockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[15c]"></a>osRtxMessageQueueTimerSetup</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerSetup
</UL>

<P><STRONG><a name="[15d]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[15e]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rtx_mutex.o(.text.osRtxMutexOwnerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxMutexOwnerRestore &rArr; osRtxThreadListSort
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[5f]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[147]"></a>osRtxPostProcess</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsSet
</UL>

<P><STRONG><a name="[162]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxThreadDelayTick &rArr; EvrRtxEventFlagsWaitTimeout &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitTimeout
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitTimeout
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreAcquireTimeout
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMemoryPoolAllocTimeout
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayCompleted
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[160]"></a>osRtxThreadDispatch</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadResume
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
</UL>

<P><STRONG><a name="[159]"></a>osRtxThreadListGet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[187]"></a>osRtxThreadListPut</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[14f]"></a>osRtxThreadListRemove</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[15f]"></a>osRtxThreadListSort</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[16d]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadReadyPut
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[15a]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[167]"></a>osRtxThreadStartup</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[168]"></a>osRtxThreadSwitch</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxThreadSwitch &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[169]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osRtxThreadWaitEnter &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadBlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxDelay
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[150]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadUnblocked
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[60]"></a>osRtxTick_Handler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$SysTick_Handler
</UL>

<P><STRONG><a name="[53]"></a>osRtxTimerSetup</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = osRtxTimerSetup &rArr; osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[52]"></a>osRtxTimerThread</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxTimerCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[4e]"></a>osThreadExit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, rtx_thread.o(.text.osThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = osThreadExit &rArr; EvrRtxThreadExit &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[127]"></a>osThreadGetName</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadGetName))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osThreadGetName &rArr; EvrRtxThreadGetName &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetName
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
</UL>

<P><STRONG><a name="[143]"></a>osThreadNew</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, rtx_thread.o(.text.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osThreadNew &rArr; EvrRtxThreadNew &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadNew
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>osThreadResume</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osThreadResume &rArr; EvrRtxThreadResume &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadResume
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
</UL>

<P><STRONG><a name="[129]"></a>osThreadSuspend</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osThreadSuspend &rArr; EvrRtxThreadSuspend &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSuspend
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
</UL>

<P><STRONG><a name="[16f]"></a>osThreadTerminate</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, rtx_thread.o(.text.osThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osThreadTerminate &rArr; EvrRtxThreadTerminate &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
</UL>

<P><STRONG><a name="[138]"></a>panic</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, runtime.o(.text.panic))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = panic &rArr; puts &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hw_claim_or_assert
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_until
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[171]"></a>ph_clear</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, pheap.o(.text.ph_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ph_clear &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_post_alloc_init
</UL>

<P><STRONG><a name="[173]"></a>ph_merge_two_pass</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, pheap.o(.text.ph_merge_two_pass))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + In Cycle
<LI>Call Chain = ph_merge_two_pass &rArr;  ph_merge_two_pass (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_merge_two_pass
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_merge_nodes
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_merge_two_pass
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_remove_any_head
</UL>

<P><STRONG><a name="[115]"></a>ph_post_alloc_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pheap.o(.text.ph_post_alloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ph_post_alloc_init &rArr; ph_clear &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_clear
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_init_default
</UL>

<P><STRONG><a name="[110]"></a>ph_remove_and_free_node</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, pheap.o(.text.ph_remove_and_free_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = ph_remove_and_free_node &rArr; ph_remove_any_head &rArr; ph_merge_two_pass &rArr;  ph_merge_two_pass (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_remove_any_head
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_merge_nodes
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_alarm_under_lock
</UL>

<P><STRONG><a name="[113]"></a>ph_remove_head</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, pheap.o(.text.ph_remove_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = ph_remove_head &rArr; ph_remove_any_head &rArr; ph_merge_two_pass &rArr;  ph_merge_two_pass (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_remove_any_head
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_alarm_callback
</UL>

<P><STRONG><a name="[12e]"></a>pll_init</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, pll.o(.text.pll_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = pll_init &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clocks_init
</UL>

<P><STRONG><a name="[175]"></a>recursive_mutex_init</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mutex_pico.o(.text.recursive_mutex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = recursive_mutex_init
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_striped_spin_lock_num
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lock_init
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtime_init
</UL>

<P><STRONG><a name="[12c]"></a>running_on_fpga</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, platform.o(.text.running_on_fpga))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clocks_init
</UL>

<P><STRONG><a name="[10a]"></a>runtime_init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, runtime.o(.text.runtime_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = runtime_init &rArr; alarm_pool_init_default &rArr; alarm_pool_post_alloc_init &rArr; hardware_alarm_set_callback &rArr; irq_remove_handler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spin_locks_reset
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;recursive_mutex_init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_init_default
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;irq_init_priorities
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clocks_init
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__pico_entry
</UL>

<P><STRONG><a name="[13f]"></a>set_sys_clock_pll</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stdlib.o(.text.set_sys_clock_pll))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c]"></a>setup_GNSS</STRONG> (Thumb, 820 bytes, Stack size 40 bytes, main.o(.text.setup_GNSS))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = setup_GNSS &rArr; LCD_1IN3_Init &rArr; DEV_Delay_ms &rArr; sleep_ms &rArr; sleep_us &rArr; sleep_until &rArr; alarm_pool_add_alarm_at &rArr; add_alarm_under_lock &rArr; ph_remove_and_free_node &rArr; ph_remove_any_head &rArr; ph_merge_two_pass &rArr;  ph_merge_two_pass (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_baudrate
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_irq_enabled_with_callback
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_irq_enabled
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set_function
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dev_key_init
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint_SetScale
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint_NewImage
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint_DrawString_EN
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint_Clear
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_Clear
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SET_PWM
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Module_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Delay_ms
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[89]"></a>sleep_ms</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, time.o(.text.sleep_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = sleep_ms &rArr; sleep_us &rArr; sleep_until &rArr; alarm_pool_add_alarm_at &rArr; add_alarm_under_lock &rArr; ph_remove_and_free_node &rArr; ph_remove_any_head &rArr; ph_merge_two_pass &rArr;  ph_merge_two_pass (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_us
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Delay_ms
</UL>

<P><STRONG><a name="[180]"></a>sleep_until</STRONG> (Thumb, 192 bytes, Stack size 40 bytes, time.o(.text.sleep_until))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = sleep_until &rArr; alarm_pool_add_alarm_at &rArr; add_alarm_under_lock &rArr; ph_remove_and_free_node &rArr; ph_remove_any_head &rArr; ph_merge_two_pass &rArr;  ph_merge_two_pass (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;busy_wait_until
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_add_alarm_at
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_us_64
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_us
</UL>

<P><STRONG><a name="[17f]"></a>sleep_us</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, time.o(.text.sleep_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = sleep_us &rArr; sleep_until &rArr; alarm_pool_add_alarm_at &rArr; add_alarm_under_lock &rArr; ph_remove_and_free_node &rArr; ph_remove_any_head &rArr; ph_merge_two_pass &rArr;  ph_merge_two_pass (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_until
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_us_64
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_ms
</UL>

<P><STRONG><a name="[8d]"></a>spi_init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spi.o(.text.spi_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = spi_init &rArr; spi_set_baudrate &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_set_baudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Module_Init
</UL>

<P><STRONG><a name="[182]"></a>spi_set_baudrate</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, spi.o(.text.spi_set_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = spi_set_baudrate &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_hz
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_init
</UL>

<P><STRONG><a name="[177]"></a>spin_locks_reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, sync.o(.text.spin_locks_reset))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runtime_init
</UL>

<P><STRONG><a name="[130]"></a>stdout_putchar</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, env_wrapper.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[85]"></a>stdout_serialize_begin</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, stdio.o(.text.stdout_serialize_begin))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_try_enter
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_enter_blocking
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdio_put_string
</UL>

<P><STRONG><a name="[13a]"></a>stop_cycle_counter</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, perf_counter.o(.text.stop_cycle_counter))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_cycle_counter
</UL>

<P><STRONG><a name="[179]"></a>system_info</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, main.o(.text.system_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = system_info &rArr; osKernelGetInfo &rArr; svcRtxKernelGetInfo &rArr; EvrRtxKernelInfoRetrieved &rArr; EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetTickFreq
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetInfo
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
</UL>

<P><STRONG><a name="[48]"></a>techdata_screen</STRONG> (Thumb, 460 bytes, Stack size 40 bytes, main.o(.text.techdata_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = techdata_screen &rArr; L76X_Update &rArr; atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadSuspend
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadResume
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetName
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsGet
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osDelay
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getStatusName
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint_DrawString_EN
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Paint_Clear
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L76X_Update
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.setup_GNSS)
</UL>
<P><STRONG><a name="[112]"></a>time_us_64</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, timer.o(.text.time_us_64))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_us
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_until
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_add_alarm_at
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_alarm_callback
</UL>

<P><STRONG><a name="[28]"></a>timer_pool_entry_comparator</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, time.o(.text.timer_pool_entry_comparator))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = timer_pool_entry_comparator &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time.o(.text.alarm_pool_init_default)
</UL>
<P><STRONG><a name="[17d]"></a>uart_init</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, uart.o(.text.uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = uart_init &rArr; uart_set_baudrate &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_set_baudrate
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_hz
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
</UL>

<P><STRONG><a name="[17e]"></a>uart_set_baudrate</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, uart.o(.text.uart_set_baudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart_set_baudrate &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_get_hz
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_init
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
</UL>

<P><STRONG><a name="[23]"></a>user_code_insert_to_systick_handler</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, perf_counter.o(.text.user_code_insert_to_systick_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = user_code_insert_to_systick_handler &rArr; __aeabi_idiv
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systick_wrapper_ual.o(.text)
</UL>
<P><STRONG><a name="[12b]"></a>watchdog_start_tick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, watchdog.o(.text.watchdog_start_tick))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clocks_init
</UL>

<P><STRONG><a name="[12d]"></a>xosc_init</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, xosc.o(.text.xosc_init))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clocks_init
</UL>

<P><STRONG><a name="[184]"></a>mutex_enter_blocking</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, mutex_pico.o(.time_critical.mutex_enter_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mutex_enter_blocking
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_serialize_begin
</UL>

<P><STRONG><a name="[87]"></a>mutex_exit</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, mutex_pico.o(.time_critical.mutex_exit))
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdio_put_string
</UL>

<P><STRONG><a name="[183]"></a>mutex_try_enter</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mutex_pico.o(.time_critical.mutex_try_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mutex_try_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_serialize_begin
</UL>

<P><STRONG><a name="[94]"></a>spi_write_blocking</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, spi.o(.time_critical.spi_write_blocking))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = spi_write_blocking
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SPI_Write_nByte
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SPI_WriteByte
</UL>

<P><STRONG><a name="[1a5]"></a>$Super$$printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[18a]"></a>__0printf</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a6]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[f4]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_info
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L76X_Update
</UL>

<P><STRONG><a name="[1a7]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[18c]"></a>__0sprintf</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a8]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[11f]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
</UL>

<P><STRONG><a name="[1a9]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1aa]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[86]"></a>$Super$$vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = $Super$$vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vprintf
</UL>

<P><STRONG><a name="[18d]"></a>__0vprintf</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1ab]"></a>__1vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[1ac]"></a>__2vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[1ad]"></a>__c89vprintf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, printfa.o(i.__0vprintf), UNUSED)

<P><STRONG><a name="[79]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[68]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1ae]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[f7]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc2.o(i.__free$2region))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L76X_Update
</UL>

<P><STRONG><a name="[f6]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc2.o(i.__malloc$2region))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;techdata_screen
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;location_screen
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock_screen
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RX
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L76X_Update
</UL>

<P><STRONG><a name="[192]"></a>__read_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__read_errno))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[1af]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1b0]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1b1]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[193]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atof
</UL>

<P><STRONG><a name="[82]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, scanf_fp.o(i._is_digit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[f9]"></a>atof</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, atof.o(i.atof))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = atof &rArr; __strtod_int &rArr; _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L76X_Update
</UL>

<P><STRONG><a name="[105]"></a>fputs</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, fputs.o(i.fputs))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>

<P><STRONG><a name="[92]"></a>puts</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = puts &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;panic
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setup_GNSS
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L76X_Update
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SET_PWM
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[2a]"></a>gpio_irq_handler</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, gpio.o(.text.gpio_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gpio_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> gpio.o(.text.gpio_set_irq_enabled_with_callback)
</UL>
<P><STRONG><a name="[10d]"></a>add_alarm_under_lock</STRONG> (Thumb, 300 bytes, Stack size 40 bytes, time.o(.text.add_alarm_under_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = add_alarm_under_lock &rArr; ph_remove_and_free_node &rArr; ph_remove_any_head &rArr; ph_merge_two_pass &rArr;  ph_merge_two_pass (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_remove_and_free_node
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_alarm_set_target
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_add_child_node
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_add_alarm_at
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_alarm_callback
</UL>

<P><STRONG><a name="[29]"></a>alarm_pool_alarm_callback</STRONG> (Thumb, 640 bytes, Stack size 88 bytes, time.o(.text.alarm_pool_alarm_callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = alarm_pool_alarm_callback &rArr; add_alarm_under_lock &rArr; ph_remove_and_free_node &rArr; ph_remove_any_head &rArr; ph_merge_two_pass &rArr;  ph_merge_two_pass (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_remove_head
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_alarm_set_target
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_alarm_under_lock
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_us_64
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> time.o(.text.alarm_pool_post_alloc_init)
</UL>
<P><STRONG><a name="[116]"></a>alarm_pool_post_alloc_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, time.o(.text.alarm_pool_post_alloc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = alarm_pool_post_alloc_init &rArr; hardware_alarm_set_callback &rArr; irq_remove_handler &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_alarm_set_callback
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_alarm_claim
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_alarm_cancel
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;next_striped_spin_lock_num
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alarm_pool_init_default
</UL>

<P><STRONG><a name="[10e]"></a>ph_add_child_node</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, time.o(.text.ph_add_child_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ph_add_child_node &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_alarm_under_lock
</UL>

<P><STRONG><a name="[49]"></a>sleep_until_callback</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, time.o(.text.sleep_until_callback))
<BR>[Address Reference Count : 1]<UL><LI> time.o(.text.sleep_until)
</UL>
<P><STRONG><a name="[2b]"></a>hardware_alarm_irq_handler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, timer.o(.text.hardware_alarm_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = hardware_alarm_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timer.o(.text.hardware_alarm_set_callback)
</UL>
<P><STRONG><a name="[170]"></a>ph_add_child_node</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pheap.o(.text.ph_add_child_node))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ph_add_child_node &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_merge_nodes
</UL>

<P><STRONG><a name="[172]"></a>ph_merge_nodes</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, pheap.o(.text.ph_merge_nodes))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ph_merge_nodes &rArr; ph_add_child_node &rArr; __aeabi_assert &rArr; fputs &rArr; fputc &rArr; stdout_putchar &rArr; _write &rArr; stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_add_child_node
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_merge_two_pass
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_remove_and_free_node
</UL>

<P><STRONG><a name="[174]"></a>ph_remove_any_head</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, pheap.o(.text.ph_remove_any_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = ph_remove_any_head &rArr; ph_merge_two_pass &rArr;  ph_merge_two_pass (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_merge_two_pass
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_assert
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_remove_head
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ph_remove_and_free_node
</UL>

<P><STRONG><a name="[4b]"></a>stdio_out_chars_crlf</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, stdio.o(.text.stdio_out_chars_crlf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = stdio_out_chars_crlf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stdio.o(.text.stdio_put_string)
</UL>
<P><STRONG><a name="[4a]"></a>stdio_out_chars_no_crlf</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stdio.o(.text.stdio_out_chars_no_crlf))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stdio_out_chars_no_crlf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stdio.o(.text.stdio_put_string)
</UL>
<P><STRONG><a name="[10c]"></a>stdio_put_string</STRONG> (Thumb, 120 bytes, Stack size 40 bytes, stdio.o(.text.stdio_put_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = stdio_put_string &rArr; stdout_serialize_begin &rArr; mutex_try_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_serialize_begin
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_exit
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_write
</UL>

<P><STRONG><a name="[f1]"></a>LCD_1IN3_SendCommand</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcd_1in3.o(.text.LCD_1IN3_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_1IN3_SendCommand &rArr; DEV_SPI_WriteByte &rArr; spi_write_blocking
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SPI_WriteByte
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Digital_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_SetWindows
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GLCD_DrawBitmap
</UL>

<P><STRONG><a name="[fd]"></a>LCD_1IN3_SendData_8Bit</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lcd_1in3.o(.text.LCD_1IN3_SendData_8Bit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_1IN3_SendData_8Bit &rArr; DEV_SPI_WriteByte &rArr; spi_write_blocking
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_SPI_WriteByte
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DEV_Digital_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_SetWindows
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_1IN3_Init
</UL>

<P><STRONG><a name="[2d]"></a>svcRtxDelay</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, rtx_delay.o(.text.svcRtxDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = svcRtxDelay &rArr; osRtxThreadWaitEnter &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayStarted
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxDelayError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_delay.o(.text.osDelay)
</UL>
<P><STRONG><a name="[14e]"></a>EventFlagsCheck</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, rtx_evflags.o(.text.EventFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = EventFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxEventFlagsSet
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsPostProcess
</UL>

<P><STRONG><a name="[4c]"></a>osRtxEventFlagsPostProcess</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, rtx_evflags.o(.text.osRtxEventFlagsPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxEventFlagsPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitCompleted
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.svcRtxEventFlagsNew)
</UL>
<P><STRONG><a name="[2e]"></a>svcRtxEventFlagsClear</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, rtx_evflags.o(.text.svcRtxEventFlagsClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxEventFlagsClear &rArr; EvrRtxEventFlagsError &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsClearDone
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.osEventFlagsClear)
</UL>
<P><STRONG><a name="[2f]"></a>svcRtxEventFlagsGet</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_evflags.o(.text.svcRtxEventFlagsGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcRtxEventFlagsGet &rArr; EvrRtxEventFlagsGet &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsGet
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osEventFlagsGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.osEventFlagsGet)
</UL>
<P><STRONG><a name="[30]"></a>svcRtxEventFlagsNew</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, rtx_evflags.o(.text.svcRtxEventFlagsNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = svcRtxEventFlagsNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.osEventFlagsNew)
</UL>
<P><STRONG><a name="[31]"></a>svcRtxEventFlagsSet</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, rtx_evflags.o(.text.svcRtxEventFlagsSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = svcRtxEventFlagsSet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsWaitCompleted
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsSetDone
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxEventFlagsError
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventFlagsCheck
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_evflags.o(.text.osEventFlagsSet)
</UL>
<P><STRONG><a name="[32]"></a>svcRtxKernelGetInfo</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelGetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = svcRtxKernelGetInfo &rArr; EvrRtxKernelInfoRetrieved &rArr; EventRecordData &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInfoRetrieved
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetInfo)
</UL>
<P><STRONG><a name="[33]"></a>svcRtxKernelGetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rtx_kernel.o(.text.svcRtxKernelGetState))
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[34]"></a>svcRtxKernelGetTickFreq</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rtx_kernel.o(.text.svcRtxKernelGetTickFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxKernelGetTickFreq &rArr; EvrRtxKernelGetTickFreq &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelGetTickFreq
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetTickFreq)
</UL>
<P><STRONG><a name="[35]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = svcRtxKernelInitialize &rArr; osRtxMemoryPoolInit &rArr; EvrRtxMemoryBlockInit &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelInitialized
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[36]"></a>svcRtxKernelStart</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = svcRtxKernelStart &rArr; osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelStarted
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[14b]"></a>MessageQueueGet</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, rtx_msgqueue.o(.text.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[15b]"></a>MessageQueuePut</STRONG> (Thumb, 94 bytes, Stack size 20 bytes, rtx_msgqueue.o(.text.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[4d]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[37]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 292 bytes, Stack size 24 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotRetrieved
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetTimeout
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueGetPending
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[38]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 464 bytes, Stack size 40 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = svcRtxMessageQueueNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueCreated
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueNew)
</UL>
<P><STRONG><a name="[39]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueRetrieved
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutTimeout
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueuePutPending
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueNotInserted
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueInserted
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[3a]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexNotAcquired
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquireTimeout
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquirePending
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[3b]"></a>svcRtxMutexNew</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = svcRtxMutexNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexCreated
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[3c]"></a>svcRtxMutexRelease</STRONG> (Thumb, 244 bytes, Stack size 16 bytes, rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexReleased
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexAcquired
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[166]"></a>ThreadFlagsCheck</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[161]"></a>osRtxThreadBlock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadPreempted
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[16a]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[16b]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadSuspend
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadResume
</UL>

<P><STRONG><a name="[163]"></a>osRtxThreadDestroy</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osRtxThreadDestroy &rArr; osRtxThreadFree &rArr; osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadDestroyed
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[164]"></a>osRtxThreadFree</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryFree &rArr; EvrRtxMemoryFree &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[165]"></a>osRtxThreadJoinWakeup</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, rtx_thread.o(.text.osRtxThreadJoinWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = osRtxThreadJoinWakeup &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadJoined
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[4f]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadFlagsWaitCompleted
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[3f]"></a>svcRtxThreadExit</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[40]"></a>svcRtxThreadGetName</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadGetName))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcRtxThreadGetName &rArr; EvrRtxThreadGetName &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadGetName
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetName)
</UL>
<P><STRONG><a name="[41]"></a>svcRtxThreadNew</STRONG> (Thumb, 520 bytes, Stack size 48 bytes, rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = svcRtxThreadNew &rArr; osRtxMemoryAlloc &rArr; EvrRtxMemoryAlloc &rArr; EventRecord4 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadCreated
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[42]"></a>svcRtxThreadResume</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = svcRtxThreadResume &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadResumed
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadResume)
</UL>
<P><STRONG><a name="[43]"></a>svcRtxThreadSuspend</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcRtxThreadSuspend &rArr; EvrRtxThreadSwitched &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSuspended
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadSuspend)
</UL>
<P><STRONG><a name="[44]"></a>svcRtxThreadTerminate</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, rtx_thread.o(.text.svcRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = svcRtxThreadTerminate &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadBlock &rArr; EvrRtxThreadPreempted &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadSwitched
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadTerminate)
</UL>
<P><STRONG><a name="[16e]"></a>TimerInsert</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, rtx_timer.o(.text.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[3e]"></a>osRtxTimerTick</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; osRtxPostProcess &rArr; osRtxKernelErrorNotify &rArr; EvrRtxKernelErrorNotify &rArr; EventRecord2 &rArr; EventRecordItem
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerSetup)
</UL>
<P><STRONG><a name="[96]"></a>EventGetTS</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, eventrecorder.o(.text.EventGetTS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EventGetTS &rArr; EventRecorderTimerGetCount &rArr; get_system_ticks
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderTimerGetCount
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[99]"></a>EventRecordItem</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, eventrecorder.o(.text.EventRecordItem))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = EventRecordItem
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderStart
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecorderInitialize
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecordData
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord4
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EventRecord2
</UL>

<P><STRONG><a name="[18e]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18b]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vprintf
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[191]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[190]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[51]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL>
<P><STRONG><a name="[74]"></a>_local_sscanf</STRONG> (Thumb, 64 bytes, Stack size 56 bytes, strtod.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _local_sscanf &rArr; _scanf_real
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__strtod_int
</UL>

<P><STRONG><a name="[7e]"></a>_fp_value</STRONG> (Thumb, 286 bytes, Stack size 72 bytes, scanf_fp.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
